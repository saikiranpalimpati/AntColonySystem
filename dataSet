#include<iostream>
#include<vector>
#include<fstream>
#include<cmath>

using namespace std;

#define PI 3.14159265

//struct so that each component in the vector will have 2 values in it
struct vertex
{
	double x;
	double y;
	vertex(double xcor, double ycor)
	{
		x = xcor;
		y = ycor;
	}
};

struct edge
{
	double from;
	double to;
	double distance;
	edge(double f, double t, double d)
	{
		from = f;
		to = t;
		distance = d;
	}
};

void main()
{
	//having an output.txt file to take the data
	ofstream outfile;
	outfile.open("outpt.txt");

	//number of vertcies required
	int n = 16;

	//total angle
	int total_angle = 360;

	//angle inside each side
	double angle_inside = total_angle / n;

	//vector to hold the coordinates
	vector<vertex> v;

	//initialising the vector with its index values
	for (int i = 0; i < n; i++)
	{
		v.push_back(vertex(i, i));
	}

	//angle for incrementing
	double angle_temp = 0;

	for (int i = 0; i < n; i++)
	{
		double xcor = 0;
		double ycor = 0;
	
		xcor = (n / 2)*cos(angle_temp*PI / 180);
		ycor = (n / 2)*sin(angle_temp*PI / 180);
		v[i] = vertex(xcor, ycor);;

		angle_temp = angle_temp + angle_inside;


	}
	
	//printing the coordinates in an output file
	for (int i = 0; i < n; i++)
	{
		outfile  << v[i].x <<v[i].y  << endl;
	}

	vector<edge> edgeList;
	for (int i = 0; i < n; i++)
	{
		for (int j = i+1; j < n; j++)
		{
			double x1, x2, y1, y2, xdist, ydist, distance;
			x1 = v[i].x;
			x2 = v[j].x;
			y1 = v[i].y;
			y2 = v[j].y;
			xdist = pow((x2 - x1),2);
			ydist = pow((y2 - y1), 2);
			distance = sqrt(xdist + ydist);

			cout << "x1 " << x1 << " x2 " << x2 << " y1 " << y1 << " y2 " << y2 << " distance " << distance << endl;

		}
	}

	system("pause");
}
